version: '3.7'

# docker build --no-cache
# docker-compose up -d
# docker-compose up -d -V
# docker ps
#docker exec -it some-mongo bash
#docker logs some-mongo
#docker-compose logs -f backend
#printenv | grep clientID
#docker-compose config
#docker-compose --version
# RUN npm install --only=production
#ARG NODE_ENV
# RUN if [  "$NODE_ENV" = "development"]; \
#         then npm install; \
#         else npm install --only=production \
          # fi
# printenv
# docker volume ls
# docker volume prune
# docker exec -it node_docker_mongo_1 bash
# docker exec -it node_docker_mongo_1 mongo -u "root" -p "example"
# docker inspect container name
# docker network inspect container name

services:
  # nginx:
  #   image: nginx:stable-alpine
  #   ports:
  #     - '8080:80'
  #    volumes:
  #     - ./.docker/default.conf:/etc/nginx/conf.d/default.conf:ro

  backend:
    container_name: backend
    restart: unless-stopped
    depends_on:
      - mongo
    build:
      dockerfile: ../backend/.docker/Dockerfile
      context: ./backend
      # args:
    ports:
      - '8080:8080'
    networks:
      - app-network
    env_file:
      - ./backend/.env.dev
    volumes:
      - ./backend/:/app
      - /app/node_modules    
   

  client:
    container_name: client
    restart: unless-stopped
    depends_on:
      - backend
    build:
      dockerfile: ../client/.docker/Dockerfile
      context: ./client
    ports:
      - '3000:3000'
    networks:
      - app-network
    volumes:
      - ./client/:/app
      - /app/node_modules

  mongo:
    image: mongo
    restart: always
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      - app-network      

  mongo-express:
    image: mongo-express
    networks:
      - app-network
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  redis:
    image: redis:alpine
    networks:
      - app-network
    depends_on:
      - mongo
    command: redis-cli -h redis
    volumes:
      - ./data:/data


  redisinsight:
    image: redislabs/redisinsight
    networks:
      - app-network
    ports:
      - 8001:8001

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  backend:
  client:
  node_modules:
  web-root:
    driver: local
